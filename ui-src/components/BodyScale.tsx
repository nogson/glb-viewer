/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 ui-src/assets/glb/BodyScale.glb -o ui-src/components/BodyScale.tsx 
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    Cylinder: THREE.Mesh
    Cube001: THREE.Mesh
    Cube: THREE.Mesh
    Cube002: THREE.Mesh
    Cylinder001_1: THREE.Mesh
    Cylinder001_2: THREE.Mesh
    Cylinder002_1: THREE.Mesh
    Cylinder002_2: THREE.Mesh
    Cylinder002_3: THREE.Mesh
    Plane: THREE.Mesh
    Cylinder004: THREE.Mesh
  }
  materials: {
    ['Material.002']: THREE.MeshStandardMaterial
    ['Material.001']: THREE.MeshStandardMaterial
    ['Material.002']: THREE.MeshStandardMaterial
    ['Material.001']: THREE.MeshStandardMaterial
    ['Material.003']: THREE.MeshStandardMaterial
    ['Material.004']: THREE.MeshPhysicalMaterial
    ['Material.005']: THREE.MeshPhysicalMaterial
  }
}

type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>>

export function Model(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('/BodyScale.glb') as GLTFResult
  return (
    <group {...props} dispose={null}>
      <mesh geometry={nodes.Cylinder.geometry} material={materials['Material.002']} />
      <mesh geometry={nodes.Cube001.geometry} material={materials['Material.001']} />
      <mesh geometry={nodes.Cube.geometry} material={materials['Material.002']} />
      <mesh geometry={nodes.Cube002.geometry} material={materials['Material.001']} />
      <group position={[0, 2.9, -1.578]} rotation={[Math.PI / 2, 0, 0]} scale={[0.1, 0.023, 0.1]}>
        <mesh geometry={nodes.Cylinder001_1.geometry} material={materials['Material.001']} />
        <mesh geometry={nodes.Cylinder001_2.geometry} material={materials['Material.003']} />
      </group>
      <mesh geometry={nodes.Plane.geometry} material={materials['Material.002']} position={[0, 4.261, -1.498]} rotation={[Math.PI / 2, 0, 0]} scale={[0.03, 0.406, 0.406]} />
      <mesh geometry={nodes.Cylinder004.geometry} material={materials['Material.005']} />
      <mesh geometry={nodes.Cylinder002_1.geometry} material={materials['Material.001']} />
      <mesh geometry={nodes.Cylinder002_2.geometry} material={materials['Material.003']} />
      <mesh geometry={nodes.Cylinder002_3.geometry} material={materials['Material.004']} />
    </group>
  )
}

useGLTF.preload('/BodyScale.glb')
